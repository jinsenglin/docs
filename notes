root@705-ubuntu:/home/jinseng# ip link
1: lo: <LOOPBACK,UP,LOWER_UP> mtu 65536 qdisc noqueue state UNKNOWN mode DEFAULT group default
    link/loopback 00:00:00:00:00:00 brd 00:00:00:00:00:00
2: p4p1: <BROADCAST,MULTICAST,UP,LOWER_UP> mtu 1500 qdisc pfifo_fast state UP mode DEFAULT group default qlen 1000
    link/ether 00:25:90:7a:21:18 brd ff:ff:ff:ff:ff:ff
3: p5p1: <NO-CARRIER,BROADCAST,MULTICAST,UP> mtu 1500 qdisc pfifo_fast state DOWN mode DEFAULT group default qlen 1000
    link/ether 00:25:90:7a:21:19 brd ff:ff:ff:ff:ff:ff
[ For KVM ]
4: virbr0: <NO-CARRIER,BROADCAST,MULTICAST,UP> mtu 1500 qdisc noqueue state DOWN mode DEFAULT group default
    link/ether b2:47:7d:c1:49:b7 brd ff:ff:ff:ff:ff:ff
[ For VMware Player ]
5: vmnet1: <BROADCAST,MULTICAST,UP,LOWER_UP> mtu 1500 qdisc pfifo_fast state UNKNOWN mode DEFAULT group default qlen 1000
    link/ether 00:50:56:c0:00:01 brd ff:ff:ff:ff:ff:ff
6: vmnet8: <BROADCAST,MULTICAST,UP,LOWER_UP> mtu 1500 qdisc pfifo_fast state UNKNOWN mode DEFAULT group default qlen 1000
    link/ether 00:50:56:c0:00:08 brd ff:ff:ff:ff:ff:ff
[ For Docker ]
7: docker0: <NO-CARRIER,BROADCAST,MULTICAST,UP> mtu 1500 qdisc noqueue state DOWN mode DEFAULT group default
    link/ether 56:84:7a:fe:97:99 brd ff:ff:ff:ff:ff:ff
[ For VirtualBox ]
8: vboxnet0: <BROADCAST,MULTICAST> mtu 1500 qdisc noop state DOWN mode DEFAULT group default qlen 1000
    link/ether 0a:00:27:00:00:00 brd ff:ff:ff:ff:ff:ff
9: vboxnet1: <BROADCAST,MULTICAST> mtu 1500 qdisc noop state DOWN mode DEFAULT group default qlen 1000
    link/ether 0a:00:27:00:00:01 brd ff:ff:ff:ff:ff:ff
10: vboxnet2: <BROADCAST,MULTICAST> mtu 1500 qdisc noop state DOWN mode DEFAULT group default qlen 1000
    link/ether 0a:00:27:00:00:02 brd ff:ff:ff:ff:ff:ff
    
root@705-ubuntu:/home/jinseng# brctl show
bridge name     bridge id               STP enabled     interfaces
docker0         8000.56847afe9799       no
virbr0          8000.000000000000       yes

root@705-ubuntu:/home/jinseng# ovs-vsctl show
9d262fb1-54bd-4942-93f9-c161a2fecd56
    ovs_version: "2.0.2"

root@705-ubuntu:/home/jinseng# ip netns list

root@705-ubuntu:/home/jinseng# route -n
Kernel IP routing table
Destination     Gateway         Genmask         Flags Metric Ref    Use Iface
0.0.0.0         140.92.24.1     0.0.0.0         UG    0      0        0 p4p1
140.92.24.0     0.0.0.0         255.255.255.0   U     0      0        0 p4p1
172.16.242.0    0.0.0.0         255.255.255.0   U     0      0        0 vmnet1
172.17.0.0      0.0.0.0         255.255.0.0     U     0      0        0 docker0
192.168.4.0     0.0.0.0         255.255.255.0   U     0      0        0 vmnet8
192.168.122.0   0.0.0.0         255.255.255.0   U     0      0        0 virbr0

http://unix.stackexchange.com/questions/40560/how-to-know-if-a-network-interface-is-tap-tun-bridge-or-physical
The answer is to run ethtool -i tunOrTapDeviceName.

Hub vs. Bridge vs. Switch
https://i.ytimg.com/vi/Xmwmezk75Tk/maxresdefault.jpg

https://en.wikipedia.org/wiki/TUN/TAP
TUN (namely network TUNnel) simulates a network layer device and it operates with layer 3 packets like IP packets.
TAP (namely network tap) simulates a link layer device and it operates with layer 2 packets like Ethernet frames.
TUN is used with routing, while TAP is used for creating a network bridge.

Understanding TUN TAP Interfaces
http://www.naturalborncoder.com/virtualization/2014/10/17/understanding-tun-tap-interfaces/
ip tuntap add name tap0 mode tap
ip link add ep1 type veth peer name ep2 #Creating Veth Pairs
ip addr add 10.0.0.10 dev ep1
ip addr add 10.0.0.11 dev ep2
ip link show
ping -I 10.0.0.10 -c1 10.0.0.11

Understanding Bridges
http://www.naturalborncoder.com/virtualization/2014/10/14/understanding-bridges/
brctl addbr br0
brctl addif br0 eth0
brctl addif br0 eth1
brctl show
brctl delif br0 eth1
brctl delif br0 eth0
brctl delbr br0
ip link add br0 type bridge #= brctl addbr br0
ip link set ep1 master br0
ip link show
ip link set ep1 nomaster
ip link delete br0

Understanding VLANs
http://www.naturalborncoder.com/virtualization/2014/10/14/understanding-vlans/

Linux Bridge and Virtual Networking
http://www.innervoice.in/blogs/2013/12/02/linux-bridge-virtual-networking/
brctl addbr kvmbr0
brctl addif kvmbr0 eth0 # Note that the kvmbr0 Linux bridge has only one interface at this time (eth0).
This interface vnet0 is a virtual interface created by libvirt (VMM) as seen in the screenshot here. This virtual interface is also called a tap interface.
Now just like you connect an Ethernet (RJ-45) cable from a physical NIC to an port (interface) on a physical switch, the VM’s virtual NIC is connected to this virtual tap interface on the Linux bridge.
The first thing to notice is the similarities in the MAC address of vnet0 (on the host server) and the eth0 (virtual NIC in the VM).
The next giveaway is the data transmitted and received on each of the interface. Since there is a direct 1-1 relationship, the TX bytes of the VM NIC matches the RX bytes of vnet0. And vice-versa.
Finally, we can see that the Virtual NIC has been configured with IP address and gateway etc. This configuration is done using the DHCP server on my physical router. This implies that virtual NIC has external network connectivity.
To summarize:
- We created a Linux bridge and added a physical NIC interface of the host.
- Then while creating a VM, we specified the Linux bridge to be used for virtual networking.
- The Virtual Machine Manager (libvirt GUI) did some behind-the-scene work to associate the Virtual NIC to the Linux bridge and in turn to the Physical NIC.
- We then observed how the VM’s virtual NIC is associated to the virtual tap interface on the host. And how the tap interface is added to the Linux bridge.
- This shows that the traffic will flow from the VM’s virtual NIC to the vnet0 tap interface, then onto the Linux bridge (virtual switch) which will send it out on the other virtual switch interface (eth0) on the host.

Tap Interfaces and Linux Bridge
http://www.innervoice.in/blogs/2013/12/08/tap-interfaces-linux-bridge/

Tun/Tap interface tutorial
http://backreference.org/2010/03/26/tuntap-interface-tutorial/

Introducing Linux Network Namespaces
http://blog.scottlowe.org/2013/09/04/introducing-linux-network-namespaces/

A Follow Up on Linux Network Namespaces
http://blog.scottlowe.org/2014/03/21/a-follow-up-on-linux-network-namespaces/

A Tutorial for Isolating Your System with Linux Namespaces
http://www.toptal.com/linux/separation-anxiety-isolating-your-system-with-linux-namespaces

Howto setup a `veth` virtual network
http://superuser.com/questions/764986/howto-setup-a-veth-virtual-network

VirutalBox :: Virtual networking
https://www.virtualbox.org/manual/ch06.html

Docker networks feature overview
https://docs.docker.com/engine/userguide/networking/

如何為網路找到適合的 MTU 大小
http://www.tp-link.tw/FAQ-190.html
ping www.tp-link.com -f -l 1472

eth0 eth0.1 (vlan) eth0:1 (alias)

多個 IP 在一塊網路卡上面 (IP Alias)
http://linux.vbird.org/linux_server/0230router/0230router.php#more_IPs
ifconfig eth1:0 192.168.0.1
此時兩個介面eth1和eth1:0的MAC是相同的

https://wiki.ubuntu.com/vlan
sudo modprobe 8021q
sudo vconfig add eth1 10
sudo ip addr add 10.0.0.1/24 dev eth1.10

http://manpages.ubuntu.com/manpages/intrepid/man5/vlan-interfaces.5.html
        iface eth0.1 inet static
            address 192.168.1.1
            netmask 255.255.255.0

        iface vlan1 inet static
            vlan-raw-device eth0
            address 192.168.1.1
            netmask 255.255.255.0

        iface eth0.0001 inet static
            address 192.168.1.1
            netmask 255.255.255.0

        iface vlan0001 inet static
            vlan-raw-device eth0
            address 192.168.1.1
            netmask 255.255.255.0

        # We don’t have br support out of the box
        iface br0.2 inet static
            vlan-raw-device br0
            address 192.168.1.1
            netmask 255.255.255.0

        # Aliases are ignored
        iface br0.2:1 inet static
            address 192.168.1.1
            netmask 255.255.255.255

switch jumbo frame
switch trunk port
tag vs untag
ovs bridge local port
